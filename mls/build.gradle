plugins {
//     Provide convenience executables for trying out the examples.
    id 'application'
    id 'com.google.protobuf' version '0.9.4'
//     Generate IntelliJ IDEA's .idea & .iml project files
    id 'idea'
}

apply plugin: 'java'
apply plugin: 'com.google.protobuf'

// Set Java version to 1.8
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    implementation project(':core')
    implementation project(':util')
    implementation project(':pkix')
    implementation project(':prov')

    //Provided
    implementation(files("../test/libs/annotations-api-6.0.53.jar"))
//    implementation(files("../test/libs/protobuf-java-util-3.22.3.jar"))
    implementation(files("../test/libs/guava-32.0.1-android.jar"))
    implementation(files("../test/libs/grpc-stub-1.58.0.jar"))
    implementation(files("../test/libs/protobuf-java-3.22.3.jar"))
    implementation(files("../test/libs/grpc-api-1.58.0.jar"))
    implementation(files("../test/libs/grpc-protobuf-lite-1.58.0.jar"))
    implementation(files("../test/libs/failureaccess-1.0.1.jar"))
    implementation(files("../test/libs/grpc-protobuf-1.58.0.jar"))

    //Compile
    compileOnly(files("../test/libs/grpc-services-1.58.0.jar"))

    //Runtime
    runtimeOnly(files("../test/libs/grpc-netty-shaded-1.58.0.jar"))
    runtimeOnly(files("../test/libs/grpc-core-1.58.0.jar"))
    runtimeOnly(files("../test/libs/perfmark-api-0.26.0.jar"))

    //Download jars online
//    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
//    implementation "io.grpc:grpc-services:${grpcVersion}"
//    implementation "io.grpc:grpc-stub:${grpcVersion}"
//    compileOnly "org.apache.tomcat:annotations-api:6.0.53"
//    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"
//    implementation "com.google.protobuf:protobuf-java-util:${protocVersion}"
}

def grpcVersion = '1.58.0' // CURRENT_GRPC_VERSION
def protocVersion = '3.22.3'


checkstyleMain {
    source = fileTree('src/main/java')
}

compileJava {
    options.errorprone.disableWarningsInGeneratedCode = true
    options.errorprone.errorproneArgs = ["-Xep:IgnoredPureGetter:OFF"]
    options.errorprone.errorproneArgs.add("-XepExcludedPaths:.*/build/generated/.*")
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

startScripts.enabled = false

// Creates start scripts for a class name and adds it to the distribution.
def createStartScripts(String mainClassName) {
    String bareName = mainClassName.substring(mainClassName.lastIndexOf('.') + 1);
    String taskName = bareName.uncapitalize();
    def newTask = tasks.register(taskName, CreateStartScripts) {
        mainClass = mainClassName
        applicationName = taskName.replaceAll('([A-Z])') { '-' + it[0].uncapitalize() }
        outputDir = new File(project.buildDir, 'tmp/scripts/' + name)
//        classpath = startScripts.classpath
    }
    application {
        applicationDistribution.into('bin') {
            from(newTask)
            fileMode = 0755
        }
    }
}

extractIncludeProto {
    dependsOn(":prov:jar",":util:jar")
}

extractIncludeTestProto {
    dependsOn(":prov:jar",":util:jar")
}

createStartScripts('org.bouncycastle.mls.client.impl.MLSClient')

