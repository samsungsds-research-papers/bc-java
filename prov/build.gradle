
dependencies {
    implementation project(':core')
    testImplementation files('../libs/unboundid-ldapsdk-6.0.8.jar')
}

jar.archiveBaseName = "bcprov-$vmrange"

sourceSets {
    main {
        java {
            srcDirs '../core/src/main/java'
        }
    }

    java9 {
        java {
            srcDirs = ['src/main/jdk1.9']
        }
    }
    java11 {
        java {
            srcDirs = ['src/main/jdk1.11']
        }
    }
    java15 {
        java {
            srcDirs = ['src/main/jdk1.15']
        }
    }
    java21 {
        java {
            srcDirs = ['src/main/jdk21']
        }
    }

}

dependencies {
    java9Implementation files([sourceSets.main.output.classesDirs]) {
        builtBy compileJava
    }

    java11Implementation files([
            sourceSets.main.output.classesDirs,
            sourceSets.java9.output.classesDirs]) {
        builtBy compileJava9Java
    }

    java15Implementation files([
            sourceSets.main.output.classesDirs,
            sourceSets.java9.output.classesDirs,
            sourceSets.java11.output.classesDirs]) {
        builtBy compileJava11Java
    }

    java21Implementation files([
            sourceSets.main.output.classesDirs,
            sourceSets.java9.output.classesDirs,
            sourceSets.java11.output.classesDirs,
            sourceSets.java15.output.classesDirs]) {
        builtBy compileJava15Java
    }
}

compileJava {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(17)
    }
    targetCompatibility = 1.8;
    sourceCompatibility = 1.8;
}

compileJava9Java {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(17)
    }
    sourceCompatibility = 9
    targetCompatibility = 9
    options.sourcepath = files(['../core/src/main/java', 'src/main/java', 'src/main/jdk1.9'])
}

compileJava11Java {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(17)
    }
    sourceCompatibility = 11
    targetCompatibility = 11
    options.sourcepath = files(['src/main/java', 'src/main/jdk1.11'])
}

compileJava15Java {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(17)
    }
    sourceCompatibility = 15
    targetCompatibility = 15
    options.sourcepath = files(['src/main/java', 'src/main/jdk1.15'])
}

compileJava21Java {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(21)
    }
    sourceCompatibility = 21
    targetCompatibility = 21
    options.sourcepath = files(['src/main/java', 'src/main/jdk21'])
}


task sourcesJar(type: Jar) {
    archiveBaseName = jar.archiveBaseName
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
    exclude("**/*.so")
    into('META-INF/versions/9') {
        from sourceSets.java9.allSource
    }
    into('META-INF/versions/11') {
        from sourceSets.java11.allSource
    }
    into('META-INF/versions/15') {
        from sourceSets.java15.allSource
    }
    into('META-INF/versions/21') {
        from sourceSets.java21.allSource
    }
}

jar {
    from sourceSets.main.output
    into('META-INF/versions/9') {
        from sourceSets.java9.output
    }
    into('META-INF/versions/11') {
        from sourceSets.java11.output
    }
    into('META-INF/versions/15') {
        from sourceSets.java15.output
    }
    into('META-INF/versions/21') {
        from sourceSets.java21.output
    }
    manifest.attributes('Multi-Release': 'true')
    manifest.attributes('Bundle-RequiredExecutionEnvironment': 'JavaSE-1.8')
    manifest.attributes('Export-Package': 'org.bouncycastle.*')
    manifest.attributes('Import-Package': 'java.*;resolution:=optional;javax.*;resolution:=optional')
}


task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveBaseName = jar.archiveBaseName
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

test {
    forkEvery = 1;
    maxParallelForks = 8;
}

sourceSets {
    test11 {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += test.output
            srcDir(files("src/test/jdk1.11", "src/test/java"))
        }
    }

    test17 {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += test.output
            srcDir(files("src/test/jdk1.11","src/test/jdk1.15", "src/test/java"))
        }
    }

    test21 {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += test.output
            srcDir(files("src/test/jdk1.11","src/test/jdk1.15","src/test/jdk21", "src/test/java"))
        }
    }
}

dependencies {
    test11Implementation group: 'junit', name: 'junit', version: '4.13.2'
    test17Implementation group: 'junit', name: 'junit', version: '4.13.2'
    test21Implementation group: 'junit', name: 'junit', version: '4.13.2'
    test11Implementation files('../libs/unboundid-ldapsdk-6.0.8.jar')
    test17Implementation files('../libs/unboundid-ldapsdk-6.0.8.jar')
    test21Implementation files('../libs/unboundid-ldapsdk-6.0.8.jar')
    test11Implementation(project(":core"))
    test17Implementation(project(":core"))
    test21Implementation(project(":core"))
}


task test11(type: Test) {

    dependsOn(jar)

    testClassesDirs = sourceSets.test11.output.classesDirs
    classpath = sourceSets.test11.runtimeClasspath + files(jar.archiveFile)

    forkEvery = 1;
    maxParallelForks = 8;

    systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "1536m"
    testLogging.showStandardStreams = true

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(11)
    }

    jvmArgs = ['-Dtest.java.version.prefix=11.']


    finalizedBy jacocoTestReport

    filter {
        includeTestsMatching "AllTest*"
        if (project.hasProperty('excludeTests')) {
            excludeTestsMatching "${excludeTests}"
        }
    }
}

task test17(type: Test) {

    // This is testing the 1.15 code base

    dependsOn jar

    testClassesDirs = sourceSets.test17.output.classesDirs
    classpath = sourceSets.test17.runtimeClasspath + files(jar.archiveFile)

    forkEvery = 1;
    maxParallelForks = 8;

    systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "1536m"
    testLogging.showStandardStreams = true

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(17)
    }

    jvmArgs = ['-Dtest.java.version.prefix=17.']


    finalizedBy jacocoTestReport

    filter {
        includeTestsMatching "AllTest*"
        if (project.hasProperty('excludeTests')) {
            excludeTestsMatching "${excludeTests}"
        }
    }
}

compileTest11Java {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(17)
    }
    sourceCompatibility = 11
    targetCompatibility = 11
    options.sourcepath = files(['src/test/java', 'src/test/jdk1.11'])
}

compileTest17Java {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(17)
    }
    sourceCompatibility = 17
    targetCompatibility = 17
    options.sourcepath = files(['src/test/java', 'src/test/jdk1.15'])
}

compileTest21Java {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(21)
    }
    sourceCompatibility = 21
    targetCompatibility = 21
    options.sourcepath = files(['src/test/java', 'src/test/jdk21'])
}

task test21(type: Test) {

    // This is testing the 21 code base

    dependsOn jar

    testClassesDirs = sourceSets.test21.output.classesDirs
    classpath = sourceSets.test21.runtimeClasspath + files(jar.archiveFile)

    forkEvery = 1;
    maxParallelForks = 8;

    systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "1536m"
    testLogging.showStandardStreams = true

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(21)
    }

    jvmArgs = ['-Dtest.java.version.prefix=21']


    finalizedBy jacocoTestReport

    filter {
        includeTestsMatching "AllTest*"
        if (project.hasProperty('excludeTests')) {
            excludeTestsMatching "${excludeTests}"
        }
    }
}